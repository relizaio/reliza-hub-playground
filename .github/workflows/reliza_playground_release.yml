name: CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build and submit release for Back-end project
      run: |
        # compute sha256 for the filesystem of our backend mock project
        # note that we should supply sha256: prefix to keep convention
        echo -n sha256: > digest_file
        dir=playground-backend-project; find "$dir" -type f -exec sha256sum {} \; | sed "s~$dir~~g" | sort -d | sha256sum | cut -d ' ' -f 1 >> digest_file
        docker pull relizaio/reliza-go-client
        echo Digest:
        echo $(cat digest_file)
        # call reliza and see if this file system artifact was already registered before
        docker run --rm relizaio/reliza-go-client checkhash -u https://playground.relizahub.com    \
          -i ${{ secrets.RELIZA_BACKEND_PROJECT_API_ID }} -k ${{ secrets.RELIZA_BACKEND_PROJECT_API_KEY }} --hash $(cat digest_file) > reliza_backend_check 2>&1
        echo "Response from Reliza Playground:"
        backend_check=$(cat reliza_backend_check)
        echo $backend_check
        # little sleep is needed to make sure GitHub Actions calculates if condition correctly
        sleep 5
        # now only create new release if no release was found with same hash
        if [ "$backend_check" == "{}" ]
        then
          # obtain version
          docker run --rm relizaio/reliza-go-client getversion -u https://playground.relizahub.com    \
            -i ${{ secrets.RELIZA_BACKEND_PROJECT_API_ID }} -k ${{ secrets.RELIZA_BACKEND_PROJECT_API_KEY }} -b $GITHUB_REF > full_version_output 2>&1
          echo "Backend version response:"
          cat full_version_output
          # now construct actual version variable - we could use jq, but why install another tool in CI env?
          cat full_version_output | grep version | cut -d ':' -f 2 | cut -d '"' -f 2 > version
          vvar=$(cat version) # this is actual version variable
          # finally stream our mock release metadata back to Reliza Playground (note that without -u param it would stream to production relizahub.com)
          docker run --rm relizaio/reliza-go-client addrelease -u https://playground.relizahub.com -b $GITHUB_REF --commit $GITHUB_SHA -v $vvar \
            -i ${{ secrets.RELIZA_BACKEND_PROJECT_API_ID }} -k ${{ secrets.RELIZA_BACKEND_PROJECT_API_KEY }} --artid reliza-backend-playground-$vvar \
            --artbuildid github$GITHUB_ACTION$GITHUB_SHA --artcimeta GitHub Actions --arttype file_system --artdigests $(cat digest_file)
        else
          echo "Artifact is already part of another release, not duplicating backend release"
        fi
    - name: Build and submit release for UI project
      run: |
        # compute sha256 for the filesystem of our backend mock project
        # note that we should supply sha256: prefix to keep convention
        echo -n sha256: > digest_file
        dir=playground-ui-project; find "$dir" -type f -exec sha256sum {} \; | sed "s~$dir~~g" | sort -d | sha256sum | cut -d ' ' -f 1 >> digest_file
        docker pull relizaio/reliza-go-client
        echo Digest:
        echo $(cat digest_file)
        # call reliza and see if this file system artifact was already registered before
        docker run --rm relizaio/reliza-go-client checkhash -u https://playground.relizahub.com    \
          -i ${{ secrets.RELIZA_UI_PROJECT_API_ID }} -k ${{ secrets.RELIZA_UI_PROJECT_API_KEY }} --hash $(cat digest_file) > reliza_backend_check 2>&1
        echo "Response from Reliza Playground:"
        backend_check=$(cat reliza_backend_check)
        echo $backend_check
        # little sleep is needed to make sure GitHub Actions calculates if condition correctly
        sleep 5
        # now only create new release if no release was found with same hash
        if [ "$backend_check" == "{}" ]
        then
          # obtain version
          docker run --rm relizaio/reliza-go-client getversion -u https://playground.relizahub.com    \
            -i ${{ secrets.RELIZA_UI_PROJECT_API_ID }} -k ${{ secrets.RELIZA_UI_PROJECT_API_KEY }} -b $GITHUB_REF > full_version_output 2>&1
          echo "Backend version response:"
          cat full_version_output
          # now construct actual version variable - we could use jq, but why install another tool in CI env?
          cat full_version_output | grep version | cut -d ':' -f 2 | cut -d '"' -f 2 > version
          vvar=$(cat version) # this is actual version variable
          # finally stream our mock release metadata back to Reliza Playground (note that without -u param it would stream to production relizahub.com)
          docker run --rm relizaio/reliza-go-client addrelease -u https://playground.relizahub.com -b $GITHUB_REF --commit $GITHUB_SHA -v $vvar \
            -i ${{ secrets.RELIZA_UI_PROJECT_API_ID }} -k ${{ secrets.RELIZA_UI_PROJECT_API_KEY }} --artid reliza-backend-playground-$vvar \
            --artbuildid github$GITHUB_ACTION$GITHUB_SHA --artcimeta GitHub Actions --arttype file_system --artdigests $(cat digest_file)
        else
          echo "Artifact is already part of another release, not duplicating backend release"
        fi
